registerEA(
  "improved_martingale",
  "An EA based on an improved Martingale algorithm(v1.0)",
  [{
    name: "diffPrice",
    value: 0.002,
    required: true,
    type: PARAMETER_TYPE.NUMBER,
    range: [0, 100]
  }, {
    name: "diffPrice2",
    value: 0.001,
    required: true,
    type: PARAMETER_TYPE.NUMBER,
    range: [0, 100]
  }],
  function(context) { // Init()
    var account = getAccount(context, 0)
    var brokerName = getBrokerNameOfAccount(account)
    var accountId = getAccountIdOfAccount(account)
    var symbolName = "EUR/USD"

    getQuotes(context, brokerName, accountId, symbolName)

    context.chartHandle = getChartHandle(context, brokerName, accountId, symbolName, TIME_FRAME.H1)
    context.maxCost = Number.MAX_VALUE
    context.maxPos = 0
    context.openTrades = []
    context.res = []
  },
  function(context) { // Deinit()
  },
  function(context) { // OnTick()
    var arrTime = getData(context, context.chartHandle, DATA_NAME.TIME)

    var account = getAccount(context, 0)
    var brokerName = getBrokerNameOfAccount(account)
    var accountId = getAccountIdOfAccount(account)
    var symbolName = "EUR/USD"
    var diffPrice = getEAParameter(context, "diffPrice")
		var diffPrice2 = getEAParameter(context, "diffPrice2")

		var signal = Math.random() >= 0.5 ? 1 : 0 // This EA is created mainly to show you how to improve Martingale algo, so the signals are generated by random. Please replace the signal generator with your own algo.

    var ask = null
    var bid = null

    try {
      ask = getAsk(context, brokerName, accountId, symbolName)
      bid = getBid(context, brokerName, accountId, symbolName)
    } catch (e) {
      // This try-catch is used to bypass the "error throw" when you start the EA too early to call getAsk or getBid(at that time, bid or ask may be not ready yet.)
      printErrorMessage(e.message)
      return
    }

    var count = getOpenTradesListLength(context)
    var countL = 0
    var countS = 0
    var totalPLL = 0.0
    var totalPLS = 0.0
    var highPriceL = -Number.MAX_VALUE
    var lowPriceL = Number.MAX_VALUE
    var highPriceS = -Number.MAX_VALUE
    var lowPriceS = Number.MAX_VALUE

    for (var i = count - 1; i >= 0; i--) {
      var openTrade = getOpenTrade(context, i)

      var openPrice = getOpenPrice(openTrade)

      if (getOrderType(openTrade) == ORDER_TYPE.OP_BUY) {
        countL++
        totalPLL += getUnrealizedPL(openTrade)

        if (openPrice > highPriceL) highPriceL = openPrice
        if (openPrice < lowPriceL) lowPriceL = openPrice
      }
      if (getOrderType(openTrade) == ORDER_TYPE.OP_SELL) {
        countS++
        totalPLS += getUnrealizedPL(openTrade)

        if (openPrice > highPriceS) highPriceS = openPrice
        if (openPrice < lowPriceS) lowPriceS = openPrice
      }
    }

    if (totalPLL + totalPLS < context.maxCost) {
      context.maxCost = totalPLL + totalPLS
    }

    if (Math.abs(countL - countS) > Math.abs(context.maxPos)) {
      context.maxPos = countL - countS
    }

    if (typeof context.currTime == "undefined") {
      context.currTime = arrTime[arrTime.length - 1]
    } else if (context.currTime != arrTime[arrTime.length - 1]) {
      context.currTime = arrTime[arrTime.length - 1]
    } else {
      return
    }

    var arrClose = getData(context, context.chartHandle, DATA_NAME.CLOSE)

    var volume = 0.01

    if (countL == 0 && countS == 0) {
			if (signal == 1) {
        sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_BUY, 0, 0, volume, 0, 0, "", 0, 0)
			} else {
        sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_SELL, 0, 0, volume, 0, 0, "", 0, 0)
			}
		} else if (((countL + countS) > 1 && (totalPLL + totalPLS) > 0.1 * (countL + countS)) ||
							(countL == 1 && countS == 0 && signal == 0 && (arrClose[arrClose.length - 1] - highPriceL) > diffPrice) ||
							(countL == 0 && countS == 1 && signal == 1 && (lowPriceS - arrClose[arrClose.length - 1]) > diffPrice)) {

      var pos = Math.abs(countL - countS)
      if (typeof context.res[pos] == "undefined") {
        context.res[pos] = 1
      } else {
        context.res[pos]++
      }
      for (var i in context.res) {
        printMessage(i + ", " + context.res[i])
      }

      printMessage("Pos: " + (countL - countS) + ", Unrealized PL: " + (totalPLL + totalPLS) +
                  ", Max Cost: " + context.maxCost + ", Max Pos: " + context.maxPos)

      for (var i = count - 1; i >= 0; i--) {
        var openTrade = getOpenTrade(context, i)

        closeTrade(brokerName, accountId, getTradeId(openTrade), 0, 0)
      }
		} else if (countL == 1 && countS == 0 && signal == 0 && (highPriceL - arrClose[arrClose.length - 1]) > diffPrice) {
      sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_SELL, 0, 0, volume, 0, 0, "", 0, 0)
		} else if (countL == 0 && countS == 1 && signal == 1 && (arrClose[arrClose.length - 1] - lowPriceS) > diffPrice) {
			sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_BUY, 0, 0, volume, 0, 0, "", 0, 0)
    } else if (countL > 0 && countS > 0 && highPriceL > highPriceS && (arrClose[arrClose.length - 1] - highPriceL) > diffPrice && lowPriceL > lowPriceS) {
      sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_SELL, 0, 0, volume, 0, 0, "", 0, 0)
			sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_SELL, 0, 0, volume, 0, 0, "", 0, 0)
		} else if (countL > 0 && countS > 0 && highPriceS > highPriceL && (arrClose[arrClose.length - 1] - highPriceS) > diffPrice && lowPriceL < lowPriceS) {
      sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_BUY, 0, 0, volume, 0, 0, "", 0, 0)
			sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_BUY, 0, 0, volume, 0, 0, "", 0, 0)
		} else if (countL > 0 && countS > 0 && lowPriceL > lowPriceS && (lowPriceS - arrClose[arrClose.length - 1]) > diffPrice && highPriceL > highPriceS) {
      sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_BUY, 0, 0, volume, 0, 0, "", 0, 0)
			sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_BUY, 0, 0, volume, 0, 0, "", 0, 0)
		} else if (countL > 0 && countS > 0 && lowPriceS > lowPriceL && (lowPriceL - arrClose[arrClose.length - 1]) > diffPrice && highPriceL < highPriceS) {
      sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_SELL, 0, 0, volume, 0, 0, "", 0, 0)
			sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_SELL, 0, 0, volume, 0, 0, "", 0, 0)
    } else if (countL > 0 && countS > 0 && highPriceL > highPriceS && (arrClose[arrClose.length - 1] - highPriceL) > diffPrice2 && lowPriceL < lowPriceS) {
      sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_SELL, 0, 0, volume, 0, 0, "", 0, 0)
		} else if (countL > 0 && countS > 0 && highPriceS > highPriceL && (arrClose[arrClose.length - 1] - highPriceS) > diffPrice2 && lowPriceL > lowPriceS) {
			sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_BUY, 0, 0, volume, 0, 0, "", 0, 0)
		} else if (countL > 0 && countS > 0 && lowPriceL > lowPriceS && (lowPriceS - arrClose[arrClose.length - 1]) > diffPrice2 && highPriceL < highPriceS) {
			sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_BUY, 0, 0, volume, 0, 0, "", 0, 0)
		} else if (countL > 0 && countS > 0 && lowPriceS > lowPriceL && (lowPriceL - arrClose[arrClose.length - 1]) > diffPrice2 && highPriceL > highPriceS) {
			sendOrder(brokerName, accountId, symbolName, ORDER_TYPE.OP_SELL, 0, 0, volume, 0, 0, "", 0, 0)
    }
  },
  function(context) { // OnTransaction()
  }
)
